//@use 'sass:math';
@function hsb-to-hsla($h-hsb, $s-hsb, $b-hsb, $a: 1) {
  @if ($b-hsb == 0) {
    @return hsla(0, 0, 0, $a)
  } @else {
    $l-hsl: calc(($b-hsb / 2) * (2 - ($s-hsb / 100)));
    $s-hsl-temp: calc(200 - $l-hsl * 2);
    @if ($l-hsl < 50) {
      $s-hsl-temp: calc($l-hsl * 2);
    }
    $s-hsl: calc(($b-hsb * $s-hsb) / $s-hsl-temp);
    @return hsla($h-hsb, ($s-hsl * 1%), ($l-hsl * 1%), $a);
  }
}

/* Valid color names & values */
/* "error" is used in case of an invalid color name is used */
$vals-primary-clr: ("default": #00FF00,
                    "caribbean_green": #00C28E,
                    "greece_blue": #00B2FF,
                    "error": #FF0000);

/* First set to default color */
$clr-primary: map-get($vals-primary-clr, "default");

/* Then try to retrieve user defined choice */
@if variable-exists("clr-primary-value") {
  /* Color value defined */
  $clr-primary: $clr-primary-value !global;
} @else if variable-exists("clr-primary-name") {
  /* Color name defined, now check validity */
  @if map-has-key($vals-primary-clr, $clr-primary-name) {
    /* Color value can be retrieve from name */
    $clr-primary: map-get($vals-primary-clr, $clr-primary-name) !global;
  } @else {
    /* Invalid color name defined, use "error" primary color */
    $clr-primary: map-get($vals-primary-clr, "error") !global;
  }
}

:root {
  --clr-primary: #{$clr-primary};
  --clr-primary-accent: #{scale-color($clr-primary, $saturation: -10%, $lightness: -15%)};

  --clr-text-button: #{hsb-to-hsla(215, 1, 97)};
  --clr-text-selection: #{scale-color($clr-primary, $saturation: 20%, $lightness: 80%)};
  --clr-text-item: #{scale-color($clr-primary, $saturation: 20%, $lightness: 87%)};
  --clr-text-item-hover: #{scale-color($clr-primary, $saturation: 0%, $lightness: -40%)};
  --clr-text-nav-shadow: #{change-color(scale-color($clr-primary, $saturation: 0%, $lightness: -60%), $alpha: .4)};

  --clr-bg-item: #{change-color(scale-color($clr-primary, $saturation: 20%, $lightness: 50%), $alpha: .12)};
  --clr-bg-item-hover: #{scale-color($clr-primary, $saturation: -40%, $lightness: 70%)};
  --clr-bg-item-current: #{scale-color($clr-primary, $saturation: -10%, $lightness: -34%)};
  --clr-bg-tag: #{scale-color($clr-primary, $saturation: 0%, $lightness: -20%)};
  --clr-bg-tag-hover: #{scale-color($clr-primary, $saturation: 40%, $lightness: 8%)};
  --clr-bg-tag-current: #{scale-color($clr-primary, $saturation: -10%, $lightness: -38%)};
  --clr-bg-selection: #{scale-color($clr-primary, $saturation: -10%, $lightness: -30%)};
}

@import "schemes";